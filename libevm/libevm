#!/usr/bin/env bash

# SPDX-License-Identifier: AGPL-3.0-or-later

#    ----------------------------------------------------------------------
#    Copyright Â© 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
          "env")")"
_lib="$( \
  realpath \
    "${_bin}/../lib")"
_crash_bash="${_lib}/libcrash-bash/crash-bash"
_sourced \
  "${_crash_bash}" 2>/dev/null || \
  source \
    "${_crash_bash}"

_libevm_requirements() {
  _check_cmd \
    'evm-chains-explorers'
  _check_cmd \
    'evm-chains-info'
  _check_cmd \
    'evm-contract-deployment-address' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployment-versions' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployments-dir' \
    'evm-contracts-tools'
  _check_cmd \
    'key-gen'
}

_contract_abi_get() {
  local \
    _deployments="${1}" \
    _network="${2}" \
    _contract="${3}" \
    _version="${4}"
  echo \
    "${_deployments}/${_contract}/${_network}/${_version}/${_contract}.abi.json"
}

_contract_bytecode_get() {
  local \
    _deployments="${1}" \
    _network="${2}" \
    _contract="${3}" \
    _version="${4}"
  echo \
    "${_deployments}/${_contract}/${_network}/${_version}/${_contract}.bin"
}

_contract_compiler_output_get() {
  local \
    _deployments="${1}" \
    _network="${2}" \
    _contract="${3}" \
    _version="${4}"
  echo \
    "${_deployments}/${_contract}/${_network}/${_version}/${_contract}.json"
}

_wallet_path_get() {
  local \
    _app="${1}" \
    _wallet_name="${2}" \
    _path
  if [[ "${_app}" == "" ]]; then
    _app="evm-wallet"
  fi
  if [[ "${_wallet_name}" == "" ]]; then
    _wallet_name="default"
  fi
  _path="${HOME}/.config/${_app}/${_wallet_name}.dat"
  echo \
    "${_path}"
}

_secret_get() {
  local \
    _secret="${1}" \
    _app="${2}" \
    _wallet_name="${3}" \
    _path
  if [[ "${_app}" == "" ]]; then
    _app="evm-wallet"
  fi
  if [[ "${_wallet_name}" == "" ]]; then
    _wallet_name="default"
  fi
  _path="${HOME}/.config/${_app}/${_wallet_name}-${_secret}.txt"
  echo \
    "${_path}"
}

_api_key_auto_detect() {
  local \
    _chain="${1}" \
    _selection_method \
    _chain_name \
    _key \
    _msg=()
  if (( 1 < "$#" )); then
    _selection_method="${2}"
  fi
  if [[ ! -v _selection_method ]]; then
    _selection_method="kirsh"
  fi
  _key="$( \
    evm-chains-explorers \
      -c \
        "${_chain}" \
      -s \
        "${_selection_method}" \
      get \
        keys)"
  _chain_name="$( \
    evm-chains-info \
      -o \
        "name" \
      "${_chain}")"
  if [[ ! -e "${_key}" ]]; then
    _msg=(
      "Found no provider services"
      "keys for chain '${_chain_name}'."
      "Check available service"
      "providers with \"evm-chains-info"
      "-o explorers '${_chain}'\""
      "and add the relative api key in"
      "'<user_home>/.config/evm-chains-explorers/<service>/default.txt'"
    )
    _msg_info \
      "${_msg[*]}"
  fi
  _set_override \
    "api" \
    "key" \
    "${_key}"
}

_secret_auto_detect() {
  local \
    _secret="${1}" \
    _secret_type="${2}" \
    _app="${3}" \
    _wallet_name="${4}" \
    _dir \
    _key_gen_opts=() \
    _msg=()
  _path="$( \
    _secret_get \
      "${_secret}" \
      "${_app}" \
      "${_wallet_name}")"
  _dir="$( \
    dirname \
      "${_path}")"
  if [[ ! -e "${_path}" ]]; then
    _key_gen_opts+=(
      -t
        "${_secret_type}"
    )
    _msg=(
      "generating ${_secret} '${_path}'"
    )
    if [[ "${quiet}" == "n" ]]; then
      _msg_info \
        "${_msg[*]}"
    fi
    mkdir \
      -p \
      "${_dir}"
    chmod \
      700 \
      "${_dir}"
    chmod \
      700 \
      "${_dir}"
    key-gen \
      "${_key_gen_opts[@]}" \
      "${_path}"
    chmod \
      400 \
      "${_path}"
    _msg=(
      "${_secret} '${_path}' successfully generated"
    )
    if [[ "${quiet}" == "n" ]]; then
      _msg_info \
        "${_msg[*]}"
    fi
  fi
  _set_override \
    "wallet" \
    "${_secret}" \
    "${_path}"
}

_deployments_dir_auto_detect() {
  local \
    _app="${1}" \
    _user_level="${2}" \
    _evm_contract_deployments_dir_opts=() \
    _deployments_dir \
    _system_deployments
  if [[ "${_user_level}" == "y" ]]; then
    _evm_contract_deployments_dir_opts+=(
      -u
    )
  fi
  _deployments_dir="$( \
    evm-contract-deployments-dir \
      "${_evm_contract_deployments_dir_opts[@]}" \
      "${_app}")"
  if [[ ! -d "${_deployments_dir}" ]]; then
    _system_deployments="$( \
     evm-contract-deployments-dir \
       "${_app}")"
    _msg=(
      "user deployments directory"
      "'${_deployments_dir}' does"
      "not exists, importing system deployments"
      "directory '${_system_deployments}'"
    )
    _msg_info \
      "${_msg[*]}"
    mkdir \
      -p \
      "${_deployments_dir}"
    chmod \
      700 \
      "${_deployments_dir}"
    cp \
     -r \
     "${_system_deployments}/"* \
     "${_deployments_dir}"
  fi
  _set_override \
    "deployments" \
    "dir" \
    "${_deployments_dir}"
}

_network_auto_detect() {
  local \
    _contract="${1}" \
    _deployments="${2}" \
    _user="${3}" \
    _contract_deployment \
    _user \
    _msg=()
  _contract_deployment="${_deployments}/${_contract}"
  if [[ "${_user}" == "y" ]]; then
    _msg=(
     "User deployments enabled, looking"
     "for cheapest network deployments at" 
     "path '${_contract_deployment}'."
   )
   _msg_info \
     "${_msg[*]}"
  fi
  _network="$( \
    evm-contract-deployment-networks \
      -C \
      "${_contract_deployment}")"
  if [[ "${_user}" == "y" ]]; then
    _msg=(
      "Found network '${_network}'."
    )
    _msg_info \
      "${_msg[*]}"
  fi
  _set_override \
    "target" \
    "network" \
    "${_network}"
}

_contract_version_auto_detect() {
  local \
    _deployments="${1}" \
    _contract="${2}" \
    _contract_short_name="${3}" \
    _network="${4}" \
    _config \
    _version
  _config="${_deployments}/${_contract}/${_network}/config.sh"
  _version="$( \
    evm-contract-deployment-versions \
      -H \
      "${_config}")"
  _set_override \
    "${_contract_short_name}" \
    "version" \
    "${_version}"
}

_contract_address_auto_detect() {
  local \
    _app="${1}" \
    _contract="${2}" \
    _contract_short_name="${3}" \
    _network="${4}" \
    _version="${5}" \
    _user="${6}" \
    _deployments="${7}" \
    _address \
    _evm_contract_deployment_address_opts=() \
    _msg=()
  if [[ "${_network}" == "" ]]; then
    _msg=(
      "The network argument is required."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  _evm_contract_deployment_address_opts+=(
    -n
      "${_network}"
  )
  if [[ "${_version}" != "" ]]; then
    _evm_contract_deployment_address_opts+=(
      -V
        "${_version}"
    )
  fi
  if [[ "${_user}" == "n" ]]; then
    _evm_contract_deployment_address_opts+=(
      -a
        "${_app}"
    )
  elif [[ "${_user}" == "y" ]]; then
    _evm_contract_deployment_address_opts+=(
      -u
      -d
        "${_deployments}" 
    )
  fi
  _address="$( \
    evm-contract-deployment-address \
      "${_evm_contract_deployment_address_opts[@]}" \
      "${_contract}")"
  if [[ "${_address}" == "" ]]; then
    _msg=(
      "error getting '${_contract}' version"
      "${_version} deployment address"
      "for network '${_network}'"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  _set_override \
    "${_contract_short_name}" \
    "address" \
    "${_address}"
}

_contract_setup_auto_detect() {
  local \
    _app="${1}" \
    _contract="${2}" \
    _contract_short_name="${3}" \
    _network="${4}" \
    _user="${5}" \
    _deployments="${6}"
  _contract_version_auto_detect \
    "${_deployments}" \
    "${_contract}" \
    "${_contract_short_name}" \
    "${_network}"
  _contract_address_auto_detect \
    "${_app}" \
    "${_contract}" \
    "${_contract_short_name}" \
    "${_network}" \
    "$(_get \
         "${_contract_short_name}" \
         "version")" \
    "${_user}" \
    "${_deployments}"
}

_display_networks() {
  local \
    _networks=() \
    _network \
    _network_name
  _networks=(
      "$@"
    )
  for _network \
    in "${_networks[@]}"; do
    _network_name="$( \
      evm-chains-info \
        -i \
          "id" \
        -o \
          "name" \
        "${_network}")"
  echo \
    "    '${_network_name}' (${_network})"
  done
}

_contract_artifacts_auto_detect() {
  local \
    _deployments_dir="${1}" \
    _target_network="${2}" \
    _contract="${3}" \
    _contract_short_name="${4}" \
    _contract_version="${5}" \
    _abi \
    _bytecode \
    _compiler_output
  _abi="$( \
    _contract_abi_get \
      "${_deployments_dir}" \
      "${_target_network}" \
      "${_contract}" \
      "${_contract_version}")"
  _bytecode="$( \
    _contract_bytecode_get \
      "${_deployments_dir}" \
      "${_target_network}" \
      "${_contract}" \
      "${_contract_version}")"
  _compiler_output="$( \
    _contract_compiler_output_get \
      "${_deployments_dir}" \
      "${_target_network}" \
      "${_contract}" \
      "${_contract_version}")"
  _set_override \
    "${_contract_short_name}" \
    "abi" \
    "${_abi}"
  _set_override \
    "${_contract_short_name}" \
    "bytecode" \
    "${_bytecode}"
  _set_override \
    "${_contract_short_name}" \
    "compiler_output" \
    "${_compiler_output}"
}

_rpc_backend_get() {
  local \
    _chain="${1}" \
    _selection_method \
    _rpc \
    _msg=()
  _selection_method="kirsh"
  if (( 1 < "$#" )); then
    _selection_method="${2}"
  fi
  _msg=(
    "Looking for info on EVM blockchain"
    "'${_chain}'."
  )
  _msg_info \
    "${_msg[*]}"
  _chain_id="$( \
    evm-chains-info \
      -o \
        "id" \
      "${_chain}")"
  if [[ "${_chain_id}" != "" ]]; then
    _chain_name="$( \
      evm-chains-info \
        -o \
          "name" \
        "${_chain}" 2>/dev/null || \
        true)"
    _msg=(
      "Found blockchain '${_chain_name}'"
      "with id '${_chain_id}'"
      "Selecting RPC address with"
      "criterion 'kirsh'."
    )
    _msg_info \
      "${_msg[*]}"
    _rpc="$( \
      evm-chains-info \
        -o \
          "rpc" \
        -s \
	  "${_selection_method}" \
        "${_chain}")"
  elif [[ "${_chain_id}" == "" ]]; then
    _msg=(
      "Found no known blockchain for input"
      "'${_chain}', interpreting given input"
      "as an rpc address for the selected"
      "network."
    )
    _msg_info \
      "${_msg[*]}"
    _rpc="${_chain}"
  fi
  _msg=(
    "Selected RPC address"
    "'${_rpc}'."
  )
  _msg_info \
    "${_msg[*]}"
  _rpc_backend="${_rpc}"
}

_wallet_address_get_cmd_setup() {
  local \
    _wallet_app="${1}" \
    _evm_wallet_address_get_cmd=()
  if [[ "${_wallet_app}" == "evm-wallet" ]]; then
    _evm_wallet_address_get_cmd+=(
      "${_wallet_app}"
        get
          "${wallet_name}"
          "address"
    )
    _wallet_address_get_cmd+=(
      "${_evm_wallet_address_get_cmd[@]}"
    )
  fi 
}

_libevm_global_variables() {
  call_auth=""
  wallet_name=""
  wallet_path=""
  wallet_password=""
  wallet_address=""
  wallet_seed=""
  api_key=""
  networks_amount=""
  target_network=""
  target_networks=()
  rpc_selection=""
  retries_max=""
  call_timeout=""
  msg_value=""
}

_libevm_app_global_variables() {
  deployments_dir=""
  user_level=""
}

_wallet_overrides_set() {
  local \
    _wallet_app="${1}" \
    _wallet_name="${2}" \
    _call_auth="${3}" \
    _wallet_address \
    _wallet_path \
    _wallet_seed \
    _wallet_password \
    _wallet_address_get_cmd=()
  _wallet_path=""
  _wallet_address=""
  if (( "$#" < 1 )); then
    _wallet_app="evm-wallet"
  fi
  if (( "$#" < 2 )); then
    _wallet_name="default"
  fi
  if (( "$#" < 3 )); then
    _call_auth="y"
  fi
  if [[ "${_call_auth}" == "y" ]]; then
    _wallet_path="$( \
      _wallet_path_get \
        "${_wallet_app}" \
        "${_wallet_name}")"
    _secret_auto_detect \
      "seed" \
      "seed" \
      "${_wallet_app}" \
      "${_wallet_name}"
    _secret_auto_detect \
      "password" \
      "plain" \
      "${_wallet_app}" \
      "${_wallet_name}"
    _wallet_address_get_cmd_setup \
      "${_wallet_app}"
    _wallet_address="$( \
      "${_wallet_address_get_cmd[@]}")"
  elif [[ "${_call_auth}" == "n" ]]; then
    _set_override \
      "wallet" \
      "seed" \
      ""
    _set_override \
      "wallet" \
      "password" \
      ""
  fi
  _set_override \
    "wallet" \
    "name" \
    "${_wallet_name}"
  _set_override \
    "wallet" \
    "path" \
    "${_wallet_path}"
  _set_override \
    "wallet" \
    "address" \
    "${_wallet_address}"
}

_wallet_getopts_params_get() {
  echo \
    "N:w:p:s:k:"
}
_wallet_getopts_case() {
  case \
    "${arg}" in
    N) override_wallet_name="${OPTARG}" ;;
    w) override_wallet_path="${OPTARG}" ;;
    p) override_wallet_password="${OPTARG}" ;;
    s) override_wallet_seed="${OPTARG}" ;;
    k) override_api_key="${OPTARG}" ;;
  esac
}

_libevm_app_getopts_params_get() {
  echo \
    "ud:"
}

_libevm_app_getopts_case() {
  case \
    "${arg}" in
    u) override_user_level="y" ;;
    d) override_deployments_dir="${OPTARG}" ;;
  esac
}

_hex_check() {
  local \
    _string="${1}" \
    _suffix \
    _not_hex
  _suffix="${_string:2}"
  _not_hex="$( \
    echo \
      "${_suffix}" | \
      grep \
        -e \
	  "[g-z]" || \
      true)"
  if [[ "${_not_hex}" != "" ]]; then
    _msg=(
      "Suffix '${_suffix}' is not"
      "hexadecimal."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_hex_length_check() {
  local \
    _string="${1}" \
    _length="${2}" \
    _suffix \
    _not_length
  _hex_check \
    "${_string}"
  _suffix="${_string:2}"
  _not_length=""
  if [[ "${#_suffix}" != "${_length}" ]]; then
    _not_length="yup"
  fi
  if [[ "${_not_length}" != "" ]]; then
    _msg=(
      "Suffix '${_suffix}' is not"
      "'${_length}' characters long."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_tx_hash_sanity_check() {
  local \
    _tx_hash="${1}"
  _tx_hash="$( \
    _lower \
      "${_tx_hash}")"
  _hex_length_check \
    "${_tx_hash}" \
    "64"
}

_address_sanity_check() {
  local \
    _address="${1}"
  _address="$( \
    _lower \
      "${_address}")"
  _hex_length_check \
    "${_address}" \
    "40"
}
